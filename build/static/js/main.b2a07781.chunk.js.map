{"version":3,"sources":["timer.js","card.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","seconds","setInterval","tick","this","setState","className","React","Component","RedCard","props","title","GreenCard","BlueCard","Card","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NA2BeA,E,YAxBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAS,GAHH,E,iFAOO,IAAD,OAChBC,aAAY,WACR,EAAKC,SACN,O,6BAIHC,KAAKC,SAAS,CACVJ,QAASG,KAAKJ,MAAMC,QAAU,M,+BAKlC,OAAO,uBAAGK,UAAU,WAAWF,KAAKJ,MAAMC,a,GArB9BM,IAAMC,WCCnB,SAASC,EAAQC,GACpB,OACI,yBAAKJ,UAAU,oBAAf,OACK,4BAAKI,EAAMC,QAKjB,SAASC,EAAUF,GACtB,OACI,yBAAKJ,UAAU,sBACX,4BAAKI,EAAMC,QAKhB,SAASE,EAASH,GACrB,OACI,yBAAKJ,UAAU,qBACX,4BAAKI,EAAMC,QAaRG,MARf,SAAcJ,GACV,OACI,yBAAKJ,UAAU,cACX,kBAAC,EAAD,MACA,wBAAIA,UAAU,WAAYI,EAAMC,S,MCX7BI,MAhBf,WACE,OACE,yBAAKT,UAAU,OACb,gCACE,kBAACG,EAAD,CAASE,MAAM,WAEf,kBAAC,EAAD,CAAaA,MAAM,gBAEnB,kBAACC,EAAD,CAAWD,MAAM,SACjB,uCACA,kBAACE,EAAD,CAAUF,MAAM,cCFJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD6HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b2a07781.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.tick();\r\n        }, 1000);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            seconds: this.state.seconds + 1\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <b className=\"fgblack\">{this.state.seconds}</b>\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport Timer from './timer';\r\n\r\nexport function RedCard(props) {\r\n    return (\r\n        <div className=\"App-header bgred\">\r\n            <h1>{props.title}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function GreenCard(props) {\r\n    return (\r\n        <div className=\"App-header bggreen\">\r\n            <h1>{props.title}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function BlueCard(props) {\r\n    return (\r\n        <div className=\"App-header bgblue\">\r\n            <h1>{props.title}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"App-header\">\r\n            <Timer />\r\n            <h1 className=\"fgblack\" >{props.title}</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\nimport  DefaultCard,{ RedCard, BlueCard, GreenCard } from './card';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <RedCard title=\"Header\" />\n        {/* <div>hello`</div> */}\n        <DefaultCard title=\"Simple Card\" />\n        {/* <div>hello`</div> */}\n        <GreenCard title=\"Body\" />\n        <div>hello`</div>\n        <BlueCard title=\"Footer\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}